import java.io.*;
import java.net.*;
import java.util.*;

public class Player 
{
	public final int numberOfShips = 5;
	private ServerSocket serverSocket = null;
	private Socket socket = null;
	private Scanner reader = null;
	private PrintWriter writer = null;
	private Ship[] shipArray = new Ship[4];
	int playerNumber = 0;

	public Player(int playerNumberIn) 
	{
		playerNumber = playerNumberIn;
	}
	
	public int getPlayerNumber()
	{
		return playerNumber;
	}

	//Not finished
	public int initialize() throws IOException 
	{
		int port = 23; // Listen on port 23 by default

		// Create a ServerSocket on port "port"
		serverSocket = new ServerSocket(port);
		socket = serverSocket.accept();
		reader = new Scanner(socket.getInputStream());
		writer = new PrintWriter(socket.getOutputStream(), true);

		try
		{
			boolean done = false;
			while (!done)
			{
				String shipType = reader.next().toUpperCase();
				if (shipType.equals("AC"))
				{
				}
				else if (shipType.equals("CR"))
				{
				}
				else if (shipType.equals("SB"))
				{
				}
				else if (shipType.equals("FR"))
				{
				}
				else
				{
					return -1;
				}
			}
		}
		catch (NullPointerException np)
		{
			return -1;
		}
		
		return 0;
	}
	
	public String checkInput(String str)
	{
		for (Ship cur : shipArray)
		{
			//Stopped here ---------------------------------------------
		}
		
		return "";
	}

	public String getInput() 
	{
		String result = "err";
		int  row = 0;
		char col = 0;

		try
		{
			if (reader.hasNext()) 
			{
				String temp = reader.next();
	
				if (temp.length() == 2) 
				{
					col = temp.charAt(0);
					row = Integer.parseInt(temp.substring(1));
				}
			}
	
			if ((row >= 0) && (row <= 10)) 
			{
				if ((col >= 'A') && (col <= 'J')) 
				{
					result = Character.toString(col) + Integer.toString(row);
				}
			}
		}
		catch (NoSuchElementException nse)
		{
			result = "err";
		}
		catch (IllegalStateException is)
		{
			result = "err";
		}
		
		return result;
	}
	
	public boolean hasLost()
	{
		boolean result = true;
		
		for (int i = 0; i < shipArray.length; i++)
		{
			if (shipArray[i].isSunk())
			{
				result = false;
			}
		}
		
		return result;
	}
	
	public void sendToClient(String message)
	{
		writer.println(message);
	}
}